<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.20.xsd">

    <!-- ChangeSet 6: Add billing/payment columns to tasks table -->
    <changeSet id="6-add-billing-columns-to-tasks" author="codex">
        <comment>Add payment tracking fields to tasks table</comment>
        <sql>
            ALTER TABLE tasks
                ADD COLUMN payment_status VARCHAR(30) NOT NULL DEFAULT 'FREE_GRANTED',
                ADD COLUMN payment_intent_id VARCHAR(255) NULL,
                ADD COLUMN amount_cents INT NOT NULL DEFAULT 0,
                ADD COLUMN currency VARCHAR(10) NOT NULL DEFAULT 'usd',
                ADD COLUMN pricing_strategy_code VARCHAR(50) NULL,
                ADD COLUMN pricing_snapshot JSON NULL,
                ADD COLUMN charge_type VARCHAR(20) NOT NULL DEFAULT 'FREE',
                ADD COLUMN paid_at TIMESTAMP NULL,
                ADD COLUMN queued_at TIMESTAMP NULL;
        </sql>
        <sql>
            CREATE INDEX idx_tasks_payment_status ON tasks(payment_status);
        </sql>
        <sql>
            CREATE INDEX idx_tasks_payment_intent_id ON tasks(payment_intent_id);
        </sql>
        <sql>
            CREATE INDEX idx_tasks_pricing_strategy ON tasks(pricing_strategy_code);
        </sql>
        <rollback>
            ALTER TABLE tasks
                DROP COLUMN payment_status,
                DROP COLUMN payment_intent_id,
                DROP COLUMN amount_cents,
                DROP COLUMN currency,
                DROP COLUMN pricing_strategy_code,
                DROP COLUMN pricing_snapshot,
                DROP COLUMN charge_type,
                DROP COLUMN paid_at,
                DROP COLUMN queued_at;
        </rollback>
    </changeSet>

    <!-- ChangeSet 7: Create pricing_strategy table -->
    <changeSet id="7-create-pricing-strategy-table" author="codex">
        <comment>Create pricing_strategy table for dynamic billing rules</comment>
        <sql>
            CREATE TABLE pricing_strategy (
                id BIGINT AUTO_INCREMENT PRIMARY KEY,
                strategy_code VARCHAR(50) NOT NULL,
                description VARCHAR(255),
                free_task_quota INT NOT NULL DEFAULT 5,
                base_price_cents INT NOT NULL,
                depth_multiplier JSON NOT NULL,
                analyst_multiplier JSON NOT NULL,
                is_active TINYINT(1) NOT NULL DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,
                UNIQUE KEY uk_pricing_strategy_code (strategy_code)
            );
        </sql>
        <rollback>
            DROP TABLE pricing_strategy;
        </rollback>
    </changeSet>

    <!-- ChangeSet 8: Seed default pricing strategy -->
    <changeSet id="8-seed-default-pricing-strategy" author="codex" runOnChange="true">
        <comment>Seed default pricing strategy (idempotent)</comment>
        <sql>
            INSERT INTO pricing_strategy (strategy_code, description, free_task_quota, base_price_cents, depth_multiplier, analyst_multiplier, is_active)
            VALUES (
                'DEFAULT_2024',
                'Default pricing strategy',
                5,
                1000,
                JSON_OBJECT('1', 1.0, '2', 1.5, '3', 2.0, '4', 2.5, '5', 3.0),
                JSON_OBJECT('1', 1.0, '2', 1.3, '3', 1.6, '4', 1.9),
                1
            )
            ON DUPLICATE KEY UPDATE
                description = VALUES(description),
                free_task_quota = VALUES(free_task_quota),
                base_price_cents = VALUES(base_price_cents),
                depth_multiplier = VALUES(depth_multiplier),
                analyst_multiplier = VALUES(analyst_multiplier),
                is_active = VALUES(is_active);
        </sql>
        <rollback>
            DELETE FROM pricing_strategy WHERE strategy_code = 'DEFAULT_2024';
        </rollback>
    </changeSet>

    <!-- ChangeSet 9: Create user_quotas table -->
    <changeSet id="9-create-user-quotas-table" author="codex">
        <comment>Create user_quotas table to track user quotas</comment>
        <sql>
            CREATE TABLE user_quotas (
                id BIGINT AUTO_INCREMENT PRIMARY KEY,
                user_id BIGINT NOT NULL UNIQUE,
                free_tasks_total INT NOT NULL DEFAULT 5,
                free_tasks_used INT NOT NULL DEFAULT 0,
                paid_tasks_total INT NOT NULL DEFAULT 0,
                total_tasks_used INT NOT NULL DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,
                CONSTRAINT fk_user_quotas_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            );
        </sql>
        <rollback>
            DROP TABLE user_quotas;
        </rollback>
    </changeSet>

    <!-- ChangeSet 10: Create payments table -->
    <changeSet id="10-create-payments-table" author="codex">
        <comment>Create payments table for Stripe PaymentIntents</comment>
        <sql>
            CREATE TABLE payments (
                id BIGINT AUTO_INCREMENT PRIMARY KEY,
                payment_intent_id VARCHAR(255) NOT NULL,
                user_id BIGINT NOT NULL,
                task_id BIGINT NOT NULL,
                pricing_strategy_code VARCHAR(50),
                amount_cents INT NOT NULL,
                currency VARCHAR(10) NOT NULL DEFAULT 'usd',
                status VARCHAR(30) NOT NULL DEFAULT 'WAITING_PAYMENT',
                payment_method VARCHAR(100),
                receipt_url VARCHAR(1024),
                metadata JSON,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,
                UNIQUE KEY uk_payments_intent_id (payment_intent_id),
                INDEX idx_payments_status (status),
                INDEX idx_payments_user (user_id),
                INDEX idx_payments_task (task_id),
                CONSTRAINT fk_payments_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                CONSTRAINT fk_payments_task FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE,
                CONSTRAINT fk_payments_pricing_strategy FOREIGN KEY (pricing_strategy_code) REFERENCES pricing_strategy(strategy_code)
            );
        </sql>
        <rollback>
            DROP TABLE payments;
        </rollback>
    </changeSet>

</databaseChangeLog>
